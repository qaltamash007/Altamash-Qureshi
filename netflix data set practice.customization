{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "f91a120e-f48a-4c2c-a80d-b144064a43b7",
      "cell_type": "code",
      "source": "import pandas as pd\nimport numpy as np",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 1
    },
    {
      "id": "272d66bb-ae96-4a5b-8651-fca73a1d8283",
      "cell_type": "code",
      "source": "df = pd.read_csv('\"C:\\Users\\qalta\\Desktop\\ST\\netflix_titles.csv\"')",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "ename": "<class 'SyntaxError'>",
          "evalue": "(unicode error) 'unicodeescape' codec can't decode bytes in position 3-4: truncated \\UXXXXXXXX escape (<ipython-input-3-0db238918aec>, line 1)",
          "traceback": [
            "\u001b[0;36m  Cell \u001b[0;32mIn[3], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    df = pd.read_csv('\"C:\\Users\\qalta\\Desktop\\ST\\netflix_titles.csv\"')\u001b[0m\n\u001b[0m                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m (unicode error) 'unicodeescape' codec can't decode bytes in position 3-4: truncated \\UXXXXXXXX escape\n"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 3
    },
    {
      "id": "0a43a8be-10e5-4be9-ac95-c4aef7d72888",
      "cell_type": "code",
      "source": "df = pd.read_csv('netflix_titles.csv')\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 4
    },
    {
      "id": "5555de66-9e73-4407-9497-df7066fd566c",
      "cell_type": "code",
      "source": "df.head()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 5,
          "output_type": "execute_result",
          "data": {
            "text/plain": "  show_id     type                  title         director  \\\n0      s1    Movie   Dick Johnson Is Dead  Kirsten Johnson   \n1      s2  TV Show          Blood & Water              NaN   \n2      s3  TV Show              Ganglands  Julien Leclercq   \n3      s4  TV Show  Jailbirds New Orleans              NaN   \n4      s5  TV Show           Kota Factory              NaN   \n\n                                                cast        country  \\\n0                                                NaN  United States   \n1  Ama Qamata, Khosi Ngema, Gail Mabalane, Thaban...   South Africa   \n2  Sami Bouajila, Tracy Gotoas, Samuel Jouy, Nabi...            NaN   \n3                                                NaN            NaN   \n4  Mayur More, Jitendra Kumar, Ranjan Raj, Alam K...          India   \n\n           date_added  release_year rating   duration  \\\n0  September 25, 2021          2020  PG-13     90 min   \n1  September 24, 2021          2021  TV-MA  2 Seasons   \n2  September 24, 2021          2021  TV-MA   1 Season   \n3  September 24, 2021          2021  TV-MA   1 Season   \n4  September 24, 2021          2021  TV-MA  2 Seasons   \n\n                                           listed_in  \\\n0                                      Documentaries   \n1    International TV Shows, TV Dramas, TV Mysteries   \n2  Crime TV Shows, International TV Shows, TV Act...   \n3                             Docuseries, Reality TV   \n4  International TV Shows, Romantic TV Shows, TV ...   \n\n                                         description  \n0  As her father nears the end of his life, filmm...  \n1  After crossing paths at a party, a Cape Town t...  \n2  To protect his family from a powerful drug lor...  \n3  Feuds, flirtations and toilet talk go down amo...  \n4  In a city of coaching centers known to train I...  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>show_id</th>\n      <th>type</th>\n      <th>title</th>\n      <th>director</th>\n      <th>cast</th>\n      <th>country</th>\n      <th>date_added</th>\n      <th>release_year</th>\n      <th>rating</th>\n      <th>duration</th>\n      <th>listed_in</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>s1</td>\n      <td>Movie</td>\n      <td>Dick Johnson Is Dead</td>\n      <td>Kirsten Johnson</td>\n      <td>NaN</td>\n      <td>United States</td>\n      <td>September 25, 2021</td>\n      <td>2020</td>\n      <td>PG-13</td>\n      <td>90 min</td>\n      <td>Documentaries</td>\n      <td>As her father nears the end of his life, filmm...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>s2</td>\n      <td>TV Show</td>\n      <td>Blood &amp; Water</td>\n      <td>NaN</td>\n      <td>Ama Qamata, Khosi Ngema, Gail Mabalane, Thaban...</td>\n      <td>South Africa</td>\n      <td>September 24, 2021</td>\n      <td>2021</td>\n      <td>TV-MA</td>\n      <td>2 Seasons</td>\n      <td>International TV Shows, TV Dramas, TV Mysteries</td>\n      <td>After crossing paths at a party, a Cape Town t...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>s3</td>\n      <td>TV Show</td>\n      <td>Ganglands</td>\n      <td>Julien Leclercq</td>\n      <td>Sami Bouajila, Tracy Gotoas, Samuel Jouy, Nabi...</td>\n      <td>NaN</td>\n      <td>September 24, 2021</td>\n      <td>2021</td>\n      <td>TV-MA</td>\n      <td>1 Season</td>\n      <td>Crime TV Shows, International TV Shows, TV Act...</td>\n      <td>To protect his family from a powerful drug lor...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>s4</td>\n      <td>TV Show</td>\n      <td>Jailbirds New Orleans</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>September 24, 2021</td>\n      <td>2021</td>\n      <td>TV-MA</td>\n      <td>1 Season</td>\n      <td>Docuseries, Reality TV</td>\n      <td>Feuds, flirtations and toilet talk go down amo...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>s5</td>\n      <td>TV Show</td>\n      <td>Kota Factory</td>\n      <td>NaN</td>\n      <td>Mayur More, Jitendra Kumar, Ranjan Raj, Alam K...</td>\n      <td>India</td>\n      <td>September 24, 2021</td>\n      <td>2021</td>\n      <td>TV-MA</td>\n      <td>2 Seasons</td>\n      <td>International TV Shows, Romantic TV Shows, TV ...</td>\n      <td>In a city of coaching centers known to train I...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5
    },
    {
      "id": "dd049b22-4567-445b-9481-636deaa7c40d",
      "cell_type": "code",
      "source": "print(df.shape)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "(8807, 12)\n"
        }
      ],
      "execution_count": 6
    },
    {
      "id": "814ee1fc-8a04-4588-ab69-1f5fc0ce4fc9",
      "cell_type": "code",
      "source": "print(df.info())",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 8807 entries, 0 to 8806\nData columns (total 12 columns):\n #   Column        Non-Null Count  Dtype \n---  ------        --------------  ----- \n 0   show_id       8807 non-null   object\n 1   type          8807 non-null   object\n 2   title         8807 non-null   object\n 3   director      6173 non-null   object\n 4   cast          7982 non-null   object\n 5   country       7976 non-null   object\n 6   date_added    8797 non-null   object\n 7   release_year  8807 non-null   int64 \n 8   rating        8803 non-null   object\n 9   duration      8804 non-null   object\n 10  listed_in     8807 non-null   object\n 11  description   8807 non-null   object\ndtypes: int64(1), object(11)\nmemory usage: 447.3+ KB\nNone\n"
        }
      ],
      "execution_count": 7
    },
    {
      "id": "057ba5e9-fc32-45c1-8718-4bf1fdefe8e9",
      "cell_type": "code",
      "source": "print(df.isnull().sum())",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "show_id            0\ntype               0\ntitle              0\ndirector        2634\ncast             825\ncountry          831\ndate_added        10\nrelease_year       0\nrating             4\nduration           3\nlisted_in          0\ndescription        0\ndtype: int64\n"
        }
      ],
      "execution_count": 8
    },
    {
      "id": "be6c3254-9199-42d2-a762-2843a851455c",
      "cell_type": "code",
      "source": "df.sample(5)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 9,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     show_id     type                     title              director  \\\n1147   s1148    Movie                Not a Game            Jose Gomez   \n32       s33  TV Show             Sex Education                   NaN   \n3823   s3824  TV Show  Heidi, bienvenida a casa                   NaN   \n4889   s4890    Movie        Despido Procedente        Lucas Figueroa   \n8286   s8287    Movie         The Eichmann Show  Paul Andrew Williams   \n\n                                                   cast  \\\n1147                                  Brendon Mcdonnell   \n32    Asa Butterfield, Gillian Anderson, Ncuti Gatwa...   \n3823  Chiara Francia, Mercedes Lambre, Victorio D'Al...   \n4889  Imanol Arias, Darío Grandinetti, Hugo Silva, L...   \n8286  Martin Freeman, Anthony LaPaglia, Rebecca Fron...   \n\n                        country          date_added  release_year rating  \\\n1147             United Kingdom      March 31, 2021          2020  TV-MA   \n32               United Kingdom  September 17, 2021          2020  TV-MA   \n3823                  Argentina        May 15, 2019          2017   TV-Y   \n4889           Argentina, Spain         May 1, 2018          2017  TV-MA   \n8286  United Kingdom, Lithuania     August 31, 2017          2015  TV-MA   \n\n       duration                                          listed_in  \\\n1147     98 min  Documentaries, International Movies, Sports Mo...   \n32    3 Seasons  British TV Shows, International TV Shows, TV C...   \n3823   1 Season                Kids' TV, Spanish-Language TV Shows   \n4889     90 min                     Comedies, International Movies   \n8286     96 min                       Dramas, International Movies   \n\n                                            description  \n1147  This documentary offers an honest look at our ...  \n32    Insecure Otis has all the answers when it come...  \n3823  Inspired by the classic novel, this telenovela...  \n4889  A Spaniard working in Argentina sees his life ...  \n8286  This is the astonishing true story behind a mo...  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>show_id</th>\n      <th>type</th>\n      <th>title</th>\n      <th>director</th>\n      <th>cast</th>\n      <th>country</th>\n      <th>date_added</th>\n      <th>release_year</th>\n      <th>rating</th>\n      <th>duration</th>\n      <th>listed_in</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1147</th>\n      <td>s1148</td>\n      <td>Movie</td>\n      <td>Not a Game</td>\n      <td>Jose Gomez</td>\n      <td>Brendon Mcdonnell</td>\n      <td>United Kingdom</td>\n      <td>March 31, 2021</td>\n      <td>2020</td>\n      <td>TV-MA</td>\n      <td>98 min</td>\n      <td>Documentaries, International Movies, Sports Mo...</td>\n      <td>This documentary offers an honest look at our ...</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>s33</td>\n      <td>TV Show</td>\n      <td>Sex Education</td>\n      <td>NaN</td>\n      <td>Asa Butterfield, Gillian Anderson, Ncuti Gatwa...</td>\n      <td>United Kingdom</td>\n      <td>September 17, 2021</td>\n      <td>2020</td>\n      <td>TV-MA</td>\n      <td>3 Seasons</td>\n      <td>British TV Shows, International TV Shows, TV C...</td>\n      <td>Insecure Otis has all the answers when it come...</td>\n    </tr>\n    <tr>\n      <th>3823</th>\n      <td>s3824</td>\n      <td>TV Show</td>\n      <td>Heidi, bienvenida a casa</td>\n      <td>NaN</td>\n      <td>Chiara Francia, Mercedes Lambre, Victorio D'Al...</td>\n      <td>Argentina</td>\n      <td>May 15, 2019</td>\n      <td>2017</td>\n      <td>TV-Y</td>\n      <td>1 Season</td>\n      <td>Kids' TV, Spanish-Language TV Shows</td>\n      <td>Inspired by the classic novel, this telenovela...</td>\n    </tr>\n    <tr>\n      <th>4889</th>\n      <td>s4890</td>\n      <td>Movie</td>\n      <td>Despido Procedente</td>\n      <td>Lucas Figueroa</td>\n      <td>Imanol Arias, Darío Grandinetti, Hugo Silva, L...</td>\n      <td>Argentina, Spain</td>\n      <td>May 1, 2018</td>\n      <td>2017</td>\n      <td>TV-MA</td>\n      <td>90 min</td>\n      <td>Comedies, International Movies</td>\n      <td>A Spaniard working in Argentina sees his life ...</td>\n    </tr>\n    <tr>\n      <th>8286</th>\n      <td>s8287</td>\n      <td>Movie</td>\n      <td>The Eichmann Show</td>\n      <td>Paul Andrew Williams</td>\n      <td>Martin Freeman, Anthony LaPaglia, Rebecca Fron...</td>\n      <td>United Kingdom, Lithuania</td>\n      <td>August 31, 2017</td>\n      <td>2015</td>\n      <td>TV-MA</td>\n      <td>96 min</td>\n      <td>Dramas, International Movies</td>\n      <td>This is the astonishing true story behind a mo...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9
    },
    {
      "id": "43533b6f-ba15-4613-9f99-e2df5752f6d1",
      "cell_type": "code",
      "source": "df.isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 10,
          "output_type": "execute_result",
          "data": {
            "text/plain": "show_id            0\ntype               0\ntitle              0\ndirector        2634\ncast             825\ncountry          831\ndate_added        10\nrelease_year       0\nrating             4\nduration           3\nlisted_in          0\ndescription        0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 10
    },
    {
      "id": "d1b164c9-4908-4b9a-bae1-b5adeab0c9a8",
      "cell_type": "code",
      "source": "df.describe(include='all').T",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 11,
          "output_type": "execute_result",
          "data": {
            "text/plain": "               count unique  \\\nshow_id         8807   8807   \ntype            8807      2   \ntitle           8807   8807   \ndirector        6173   4528   \ncast            7982   7692   \ncountry         7976    748   \ndate_added      8797   1767   \nrelease_year  8807.0    NaN   \nrating          8803     17   \nduration        8804    220   \nlisted_in       8807    514   \ndescription     8807   8775   \n\n                                                            top  freq  \\\nshow_id                                                      s1     1   \ntype                                                      Movie  6131   \ntitle                                      Dick Johnson Is Dead     1   \ndirector                                          Rajiv Chilaka    19   \ncast                                         David Attenborough    19   \ncountry                                           United States  2818   \ndate_added                                      January 1, 2020   109   \nrelease_year                                                NaN   NaN   \nrating                                                    TV-MA  3207   \nduration                                               1 Season  1793   \nlisted_in                          Dramas, International Movies   362   \ndescription   Paranormal activity at a lush, abandoned prope...     4   \n\n                     mean       std     min     25%     50%     75%     max  \nshow_id               NaN       NaN     NaN     NaN     NaN     NaN     NaN  \ntype                  NaN       NaN     NaN     NaN     NaN     NaN     NaN  \ntitle                 NaN       NaN     NaN     NaN     NaN     NaN     NaN  \ndirector              NaN       NaN     NaN     NaN     NaN     NaN     NaN  \ncast                  NaN       NaN     NaN     NaN     NaN     NaN     NaN  \ncountry               NaN       NaN     NaN     NaN     NaN     NaN     NaN  \ndate_added            NaN       NaN     NaN     NaN     NaN     NaN     NaN  \nrelease_year  2014.180198  8.819312  1925.0  2013.0  2017.0  2019.0  2021.0  \nrating                NaN       NaN     NaN     NaN     NaN     NaN     NaN  \nduration              NaN       NaN     NaN     NaN     NaN     NaN     NaN  \nlisted_in             NaN       NaN     NaN     NaN     NaN     NaN     NaN  \ndescription           NaN       NaN     NaN     NaN     NaN     NaN     NaN  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>unique</th>\n      <th>top</th>\n      <th>freq</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>show_id</th>\n      <td>8807</td>\n      <td>8807</td>\n      <td>s1</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>type</th>\n      <td>8807</td>\n      <td>2</td>\n      <td>Movie</td>\n      <td>6131</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>title</th>\n      <td>8807</td>\n      <td>8807</td>\n      <td>Dick Johnson Is Dead</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>director</th>\n      <td>6173</td>\n      <td>4528</td>\n      <td>Rajiv Chilaka</td>\n      <td>19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>cast</th>\n      <td>7982</td>\n      <td>7692</td>\n      <td>David Attenborough</td>\n      <td>19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>country</th>\n      <td>7976</td>\n      <td>748</td>\n      <td>United States</td>\n      <td>2818</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>date_added</th>\n      <td>8797</td>\n      <td>1767</td>\n      <td>January 1, 2020</td>\n      <td>109</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>release_year</th>\n      <td>8807.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2014.180198</td>\n      <td>8.819312</td>\n      <td>1925.0</td>\n      <td>2013.0</td>\n      <td>2017.0</td>\n      <td>2019.0</td>\n      <td>2021.0</td>\n    </tr>\n    <tr>\n      <th>rating</th>\n      <td>8803</td>\n      <td>17</td>\n      <td>TV-MA</td>\n      <td>3207</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>duration</th>\n      <td>8804</td>\n      <td>220</td>\n      <td>1 Season</td>\n      <td>1793</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>listed_in</th>\n      <td>8807</td>\n      <td>514</td>\n      <td>Dramas, International Movies</td>\n      <td>362</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>description</th>\n      <td>8807</td>\n      <td>8775</td>\n      <td>Paranormal activity at a lush, abandoned prope...</td>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 11
    },
    {
      "id": "65947d29-83d7-4a8b-8eaf-27ae1d98fb19",
      "cell_type": "code",
      "source": "df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 12
    },
    {
      "id": "cb6ad561-16c3-4b36-af4c-e66d83c31611",
      "cell_type": "code",
      "source": "df.columns",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 15,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Index(['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added',\n       'release_year', 'rating', 'duration', 'listed_in', 'description'],\n      dtype='object')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 15
    },
    {
      "id": "28d12a80-cc8b-4298-8333-5f995072d5bc",
      "cell_type": "code",
      "source": "df.columns",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 14,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Index(['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added',\n       'release_year', 'rating', 'duration', 'listed_in', 'description'],\n      dtype='object')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 14
    },
    {
      "id": "0c655d33-da96-4951-b2ee-bf6be9ed3404",
      "cell_type": "code",
      "source": "df['date_added'] = pd.to_datetime(df['date_added'], errors = 'coerce')",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 16
    },
    {
      "id": "e94c9388-1f49-4081-94a2-cc432ff8316d",
      "cell_type": "code",
      "source": "df[['date_added']].head()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 17,
          "output_type": "execute_result",
          "data": {
            "text/plain": "  date_added\n0 2021-09-25\n1 2021-09-24\n2 2021-09-24\n3 2021-09-24\n4 2021-09-24",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_added</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-09-25</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-09-24</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-09-24</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-09-24</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-09-24</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 17
    },
    {
      "id": "a8b0dff0-e8a1-4ba7-9333-c73f98bdb8e0",
      "cell_type": "code",
      "source": "df['country'].fillna('Unknown', inplace = True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 21
    },
    {
      "id": "e9287989-9a7e-4ba0-a714-c330a923826d",
      "cell_type": "code",
      "source": "df['rating'].fillna('Not Rated', inplace=True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 22
    },
    {
      "id": "a16481f3-c38a-4e74-b1e5-c6c784f20920",
      "cell_type": "code",
      "source": "df.dropna(subset=['cast','director'], inplace = True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 23
    },
    {
      "id": "8f52f10b-df94-4b15-8a6a-7cc748a8c83f",
      "cell_type": "code",
      "source": "df.isnull().sum()\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 24,
          "output_type": "execute_result",
          "data": {
            "text/plain": "show_id         0\ntype            0\ntitle           0\ndirector        0\ncast            0\ncountry         0\ndate_added      4\nrelease_year    0\nrating          0\nduration        3\nlisted_in       0\ndescription     0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 24
    },
    {
      "id": "ac53fefc-a242-428b-bd91-27c8908e152a",
      "cell_type": "code",
      "source": "df['director']= df['director'].str.strip()",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 27
    },
    {
      "id": "603888c5-35c5-49ee-a76a-4a845f026f6f",
      "cell_type": "code",
      "source": "df['title'] = df['title'].str.strip()",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 28
    },
    {
      "id": "5ea0519b-f5a2-4fe9-9fb5-5ae7f1488174",
      "cell_type": "code",
      "source": "df['cast'] = df['cast'].str.strip()",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 29
    },
    {
      "id": "2be30031-17c8-401a-b0eb-757e8081ada8",
      "cell_type": "code",
      "source": "df.isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 30,
          "output_type": "execute_result",
          "data": {
            "text/plain": "show_id         0\ntype            0\ntitle           0\ndirector        0\ncast            0\ncountry         0\ndate_added      0\nrelease_year    0\nrating          0\nduration        0\nlisted_in       0\ndescription     0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 30
    },
    {
      "id": "07e3c6ad-5951-4632-8ab1-12fba489a764",
      "cell_type": "code",
      "source": "df['type'].value_counts()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 32,
          "output_type": "execute_result",
          "data": {
            "text/plain": "type\nMovie      5522\nTV Show     178\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 32
    },
    {
      "id": "6dcb4fc7-ac73-41a9-bf8a-fbf6de565ffd",
      "cell_type": "code",
      "source": "df['country'].value_counts().head(20)\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 35,
          "output_type": "execute_result",
          "data": {
            "text/plain": "country\nUnited States                    1849\nIndia                             875\nUnkown                            364\nUnited Kingdom                    183\nCanada                            107\nSpain                              91\nEgypt                              90\nNigeria                            88\nJapan                              83\nTurkey                             79\nIndonesia                          76\nPhilippines                        74\nFrance                             73\nMexico                             64\nUnited Kingdom, United States      59\nUnited States, Canada              52\nHong Kong                          49\nSouth Korea                        48\nBrazil                             46\nThailand                           41\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 35
    },
    {
      "id": "a112367c-8308-4f6c-afd5-a8eec0d4238b",
      "cell_type": "code",
      "source": "df['year_month'] = df['date_added'].dt.to_period('M')",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "ename": "<class 'AttributeError'>",
          "evalue": "Can only use .dt accessor with datetimelike values",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[38], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124myear_month\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mdate_added\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdt\u001b[49m\u001b[38;5;241m.\u001b[39mto_period(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/pandas/core/generic.py:6299\u001b[0m, in \u001b[0;36mNDFrame.__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6292\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m   6293\u001b[0m     name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_internal_names_set\n\u001b[1;32m   6294\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_metadata\n\u001b[1;32m   6295\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessors\n\u001b[1;32m   6296\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_info_axis\u001b[38;5;241m.\u001b[39m_can_hold_identifiers_and_holds_name(name)\n\u001b[1;32m   6297\u001b[0m ):\n\u001b[1;32m   6298\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[name]\n\u001b[0;32m-> 6299\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mobject\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__getattribute__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/pandas/core/accessor.py:224\u001b[0m, in \u001b[0;36mCachedAccessor.__get__\u001b[0;34m(self, obj, cls)\u001b[0m\n\u001b[1;32m    221\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m obj \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    222\u001b[0m     \u001b[38;5;66;03m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[39;00m\n\u001b[1;32m    223\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessor\n\u001b[0;32m--> 224\u001b[0m accessor_obj \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_accessor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    225\u001b[0m \u001b[38;5;66;03m# Replace the property with the accessor object. Inspired by:\u001b[39;00m\n\u001b[1;32m    226\u001b[0m \u001b[38;5;66;03m# https://www.pydanny.com/cached-property.html\u001b[39;00m\n\u001b[1;32m    227\u001b[0m \u001b[38;5;66;03m# We need to use object.__setattr__ because we overwrite __setattr__ on\u001b[39;00m\n\u001b[1;32m    228\u001b[0m \u001b[38;5;66;03m# NDFrame\u001b[39;00m\n\u001b[1;32m    229\u001b[0m \u001b[38;5;28mobject\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__setattr__\u001b[39m(obj, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_name, accessor_obj)\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/pandas/core/indexes/accessors.py:643\u001b[0m, in \u001b[0;36mCombinedDatetimelikeProperties.__new__\u001b[0;34m(cls, data)\u001b[0m\n\u001b[1;32m    640\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data\u001b[38;5;241m.\u001b[39mdtype, PeriodDtype):\n\u001b[1;32m    641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m PeriodProperties(data, orig)\n\u001b[0;32m--> 643\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCan only use .dt accessor with datetimelike values\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
            "\u001b[0;31mAttributeError\u001b[0m: Can only use .dt accessor with datetimelike values"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 38
    },
    {
      "id": "f6f82b09-716e-423a-b954-c511565f974e",
      "cell_type": "code",
      "source": "df['year_month'] = df['date_added'].dt.to_period('M')\ndf['year_month'].value_counts().sort_index().plot(kind='line', figsize=(12,6), title='Content Added Over Time')\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "ename": "<class 'AttributeError'>",
          "evalue": "Can only use .dt accessor with datetimelike values",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[39], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124myear_month\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mdate_added\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdt\u001b[49m\u001b[38;5;241m.\u001b[39mto_period(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      2\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124myear_month\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalue_counts()\u001b[38;5;241m.\u001b[39msort_index()\u001b[38;5;241m.\u001b[39mplot(kind\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mline\u001b[39m\u001b[38;5;124m'\u001b[39m, figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m,\u001b[38;5;241m6\u001b[39m), title\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mContent Added Over Time\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/pandas/core/generic.py:6299\u001b[0m, in \u001b[0;36mNDFrame.__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6292\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m   6293\u001b[0m     name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_internal_names_set\n\u001b[1;32m   6294\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_metadata\n\u001b[1;32m   6295\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessors\n\u001b[1;32m   6296\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_info_axis\u001b[38;5;241m.\u001b[39m_can_hold_identifiers_and_holds_name(name)\n\u001b[1;32m   6297\u001b[0m ):\n\u001b[1;32m   6298\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[name]\n\u001b[0;32m-> 6299\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mobject\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__getattribute__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/pandas/core/accessor.py:224\u001b[0m, in \u001b[0;36mCachedAccessor.__get__\u001b[0;34m(self, obj, cls)\u001b[0m\n\u001b[1;32m    221\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m obj \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    222\u001b[0m     \u001b[38;5;66;03m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[39;00m\n\u001b[1;32m    223\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessor\n\u001b[0;32m--> 224\u001b[0m accessor_obj \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_accessor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    225\u001b[0m \u001b[38;5;66;03m# Replace the property with the accessor object. Inspired by:\u001b[39;00m\n\u001b[1;32m    226\u001b[0m \u001b[38;5;66;03m# https://www.pydanny.com/cached-property.html\u001b[39;00m\n\u001b[1;32m    227\u001b[0m \u001b[38;5;66;03m# We need to use object.__setattr__ because we overwrite __setattr__ on\u001b[39;00m\n\u001b[1;32m    228\u001b[0m \u001b[38;5;66;03m# NDFrame\u001b[39;00m\n\u001b[1;32m    229\u001b[0m \u001b[38;5;28mobject\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__setattr__\u001b[39m(obj, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_name, accessor_obj)\n",
            "File \u001b[0;32m/lib/python3.12/site-packages/pandas/core/indexes/accessors.py:643\u001b[0m, in \u001b[0;36mCombinedDatetimelikeProperties.__new__\u001b[0;34m(cls, data)\u001b[0m\n\u001b[1;32m    640\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data\u001b[38;5;241m.\u001b[39mdtype, PeriodDtype):\n\u001b[1;32m    641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m PeriodProperties(data, orig)\n\u001b[0;32m--> 643\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCan only use .dt accessor with datetimelike values\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
            "\u001b[0;31mAttributeError\u001b[0m: Can only use .dt accessor with datetimelike values"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 39
    },
    {
      "id": "db4ce6b1-8b77-447e-910b-37649893fc35",
      "cell_type": "code",
      "source": "df['listed_in'].str.split(', ').explode().value_counts().head(10)\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 40,
          "output_type": "execute_result",
          "data": {
            "text/plain": "listed_in\nInternational Movies        2548\nDramas                      2398\nComedies                    1636\nAction & Adventure           848\nIndependent Movies           751\nRomantic Movies              604\nChildren & Family Movies     583\nThrillers                    575\nDocumentaries                418\nHorror Movies                352\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 40
    },
    {
      "id": "0429e233-aca5-4b06-ae1a-e55bcbcf4252",
      "cell_type": "code",
      "source": "df['cast'].str.split(', ', expand= True).stack().value_counts().head(10)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 41,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Anupam Kher         42\nShah Rukh Khan      35\nNaseeruddin Shah    32\nOm Puri             30\nAkshay Kumar        30\nAmitabh Bachchan    28\nParesh Rawal        28\nJulie Tejwani       28\nRupa Bhimani        27\nBoman Irani         27\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 41
    },
    {
      "id": "9fc7bdc1-17ce-4ad5-9c8c-f370d30f7ee9",
      "cell_type": "code",
      "source": "df['director'].str.split(', ', expand=True).stack().value_counts().head(10)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 42,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Jan Suter              21\nRajiv Chilaka          19\nRaúl Campos            19\nMarcus Raboy           16\nJay Karas              15\nSuhas Kadav            13\nCathy Garcia-Molina    13\nJay Chapman            12\nYoussef Chahine        12\nMartin Scorsese        12\nName: count, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 42
    },
    {
      "id": "96d2aff5-e25d-4aae-921c-78ae95b73f9d",
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(12, 6))\nsns.histplot(df['release_year'], bins=30, kde=True)\nplt.title('Distribution of Content Release Years')\nplt.xlabel('Release Year')\nplt.ylabel('Number of Titles')\nplt.show()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "Matplotlib is building the font cache; this may take a moment.\n"
        },
        {
          "ename": "<class 'ModuleNotFoundError'>",
          "evalue": "No module named 'seaborn'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[43], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mseaborn\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01msns\u001b[39;00m\n\u001b[1;32m      4\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n\u001b[1;32m      5\u001b[0m sns\u001b[38;5;241m.\u001b[39mhistplot(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrelease_year\u001b[39m\u001b[38;5;124m'\u001b[39m], bins\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m30\u001b[39m, kde\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'seaborn'"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 43
    },
    {
      "id": "13ab6303-a66b-43c5-baea-84abffeeabae",
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\nimport seaborn as sns",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "ename": "<class 'ModuleNotFoundError'>",
          "evalue": "No module named 'seaborn'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[44], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mseaborn\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01msns\u001b[39;00m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'seaborn'"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 44
    },
    {
      "id": "c8f182d1-3170-40ff-83f1-e69327c9fd0a",
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 45
    },
    {
      "id": "349ddad1-5e2e-4cb4-8c0f-e456107b5149",
      "cell_type": "code",
      "source": "import seaborn as sns",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "ename": "<class 'ModuleNotFoundError'>",
          "evalue": "No module named 'seaborn'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[46], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mseaborn\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01msns\u001b[39;00m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'seaborn'"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 46
    },
    {
      "id": "bf138f8c-2701-4ca7-b159-02bf04839c61",
      "cell_type": "code",
      "source": "plt.figure(figsize=(12, 6))\nsns.histplot(df['release_year'], bins=30, kde=True)\nplt.title('Distribution of Content Release Years')\nplt.xlabel('Release Year')\nplt.ylabel('Number of Titles')\nplt.show()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1200x600 with 0 Axes>"
          },
          "metadata": {}
        },
        {
          "ename": "<class 'NameError'>",
          "evalue": "name 'sns' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[47], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n\u001b[0;32m----> 2\u001b[0m \u001b[43msns\u001b[49m\u001b[38;5;241m.\u001b[39mhistplot(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrelease_year\u001b[39m\u001b[38;5;124m'\u001b[39m], bins\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m30\u001b[39m, kde\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDistribution of Content Release Years\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      4\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mRelease Year\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
            "\u001b[0;31mNameError\u001b[0m: name 'sns' is not defined"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 47
    },
    {
      "id": "4b8f13b4-d80f-4797-b32f-68518cb32911",
      "cell_type": "code",
      "source": "import numpy as np\nimport datetime\n\n# Create a function to generate a random date within a reasonable range\ndef random_date(start, end):\n    \"\"\"Generates a random datetime between start and end dates.\"\"\"\n    return start + datetime.timedelta(seconds=np.random.randint(0, int((end - start).total_seconds())))\n\n# Define date range for new additions\nstart_date = datetime.datetime(2022, 1, 1)\nend_date = datetime.datetime(2023, 12, 31)\n\nnew_data = {\n    'show_id': [f'ns9001', 'ns9002', 'ns9003'],\n    'type': ['Movie', 'TV Show', 'Movie'],\n    'title': ['Action Packed 3', 'Mystery Unfolds', 'Another Comedy'],\n    'director': ['John Doe', np.nan, 'Jane Smith'],\n    'cast': ['Actor A, Actor B', 'Actor C', 'Actor D, Actor E'],\n    'country': ['USA', 'UK', 'Canada'],\n    'date_added': [random_date(start_date, end_date).strftime('%Y-%m-%d'),\n                   random_date(start_date, end_date).strftime('%Y-%m-%d'),\n                   random_date(start_date, end_date).strftime('%Y-%m-%d')],\n    'release_year': [2022, 2023, 2023],\n    'rating': ['PG-13', 'TV-MA', 'R'],\n    'duration': ['110 min', '2 Seasons', '95 min'],\n    'listed_in': ['Action, Adventure', 'Mystery, Thriller', 'Comedy'],\n    'description': ['Exciting new action film.', 'A gripping mystery series.', 'Hilarious new comedy.'],\n}\n\nnew_df = pd.DataFrame(new_data)\nprint(\"Preview of New Data:\")\nprint(new_df)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Preview of New Data:\n  show_id     type            title    director              cast country  \\\n0  ns9001    Movie  Action Packed 3    John Doe  Actor A, Actor B     USA   \n1  ns9002  TV Show  Mystery Unfolds         NaN           Actor C      UK   \n2  ns9003    Movie   Another Comedy  Jane Smith  Actor D, Actor E  Canada   \n\n   date_added  release_year rating   duration          listed_in  \\\n0  2023-05-14          2022  PG-13    110 min  Action, Adventure   \n1  2023-11-09          2023  TV-MA  2 Seasons  Mystery, Thriller   \n2  2023-03-12          2023      R     95 min             Comedy   \n\n                  description  \n0   Exciting new action film.  \n1  A gripping mystery series.  \n2       Hilarious new comedy.  \n"
        }
      ],
      "execution_count": 48
    },
    {
      "id": "00dce05b-f039-47ac-9084-648c011f6b02",
      "cell_type": "code",
      "source": "# Standardize Column Names\nnew_df.columns = new_df.columns.str.strip().str.lower().str.replace(' ', '_')\nprint(\"\\nNew DataFrame Columns After Standardization:\")\nprint(new_df.columns)\n\n# Convert date_added to datetime\nnew_df['date_added'] = pd.to_datetime(new_df['date_added'], errors='coerce')\nprint(\"\\nNew DataFrame with 'date_added' as datetime:\")\nprint(new_df[['date_added']].head())\n\n# Handle Missing Values (same logic as before)\nnew_df['country'].fillna('Unknown', inplace=True)\nnew_df['rating'].fillna('Not Rated', inplace=True)\nnew_df.dropna(subset=['cast', 'director'], inplace=True) # Applying the same optional drop\n\n# Optional: Clean String Columns\nnew_df['title'] = new_df['title'].str.strip()\nif 'director' in new_df.columns:\n    new_df['director'] = new_df['director'].str.strip()\nif 'cast' in new_df.columns:\n    new_df['cast'] = new_df['cast'].str.strip()\n\nprint(\"\\nProcessed New DataFrame Info:\")\nnew_df.info()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "\nNew DataFrame Columns After Standardization:\nIndex(['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added',\n       'release_year', 'rating', 'duration', 'listed_in', 'description'],\n      dtype='object')\n\nNew DataFrame with 'date_added' as datetime:\n  date_added\n0 2023-05-14\n1 2023-11-09\n2 2023-03-12\n"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "<ipython-input-49-5eafefca7d33>:12: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  new_df['country'].fillna('Unknown', inplace=True)\n<ipython-input-49-5eafefca7d33>:13: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  new_df['rating'].fillna('Not Rated', inplace=True)\n"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "\nProcessed New DataFrame Info:\n<class 'pandas.core.frame.DataFrame'>\nIndex: 2 entries, 0 to 2\nData columns (total 12 columns):\n #   Column        Non-Null Count  Dtype         \n---  ------        --------------  -----         \n 0   show_id       2 non-null      object        \n 1   type          2 non-null      object        \n 2   title         2 non-null      object        \n 3   director      2 non-null      object        \n 4   cast          2 non-null      object        \n 5   country       2 non-null      object        \n 6   date_added    2 non-null      datetime64[ns]\n 7   release_year  2 non-null      int64         \n 8   rating        2 non-null      object        \n 9   duration      2 non-null      object        \n 10  listed_in     2 non-null      object        \n 11  description   2 non-null      object        \ndtypes: datetime64[ns](1), int64(1), object(10)\nmemory usage: 128.0+ bytes\n"
        }
      ],
      "execution_count": 49
    },
    {
      "id": "dfc8ff43-354c-47b8-9261-4f7628d5b1da",
      "cell_type": "code",
      "source": "new_df.info()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "<class 'pandas.core.frame.DataFrame'>\nIndex: 2 entries, 0 to 2\nData columns (total 12 columns):\n #   Column        Non-Null Count  Dtype         \n---  ------        --------------  -----         \n 0   show_id       2 non-null      object        \n 1   type          2 non-null      object        \n 2   title         2 non-null      object        \n 3   director      2 non-null      object        \n 4   cast          2 non-null      object        \n 5   country       2 non-null      object        \n 6   date_added    2 non-null      datetime64[ns]\n 7   release_year  2 non-null      int64         \n 8   rating        2 non-null      object        \n 9   duration      2 non-null      object        \n 10  listed_in     2 non-null      object        \n 11  description   2 non-null      object        \ndtypes: datetime64[ns](1), int64(1), object(10)\nmemory usage: 128.0+ bytes\n"
        }
      ],
      "execution_count": 50
    },
    {
      "id": "a109abfc-d453-416f-b214-c56a30fb46a6",
      "cell_type": "code",
      "source": "updated_df = pd.concat([df, new_df], ignore_index=True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 51
    },
    {
      "id": "20fb2a78-0d24-4e32-9502-4aefebf94134",
      "cell_type": "code",
      "source": "print(\"\\nShape of Original DataFrame:\", df.shape)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "\n (5700, 12)iginal DataFrame:\n"
        }
      ],
      "execution_count": 52
    },
    {
      "id": "84bc5930-0d78-4f92-989b-772f8804480f",
      "cell_type": "code",
      "source": "print(\"Shape of New DataFrame:\", new_df.shape)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Shape of New DataFrame: (2, 12)\n"
        }
      ],
      "execution_count": 53
    },
    {
      "id": "9d8a548b-25d6-4ec2-adbe-e49d940e1ffd",
      "cell_type": "code",
      "source": "print(\"Shape of Updated DataFrame:\", updated_df.shape)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Shape of Updated DataFrame: (5702, 12)\n"
        }
      ],
      "execution_count": 54
    },
    {
      "id": "69ffde5a-08fa-4246-9435-f7b52b1b05ec",
      "cell_type": "code",
      "source": "print(\"\\nFirst few rows of the Updated DataFrame:\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "\nFirst few rows of the Updated DataFrame:\n"
        }
      ],
      "execution_count": 55
    },
    {
      "id": "c70223a5-2ecb-4249-9ba9-2049303c0f5d",
      "cell_type": "code",
      "source": "print(updated_df.head())",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "  show_id     type                             title  \\\n0      s3  TV Show                         Ganglands   \n1      s6  TV Show                     Midnight Mass   \n2      s7    Movie  My Little Pony: A New Generation   \n3      s8    Movie                           Sankofa   \n4      s9  TV Show     The Great British Baking Show   \n\n                        director  \\\n0                Julien Leclercq   \n1                  Mike Flanagan   \n2  Robert Cullen, José Luis Ucha   \n3                   Haile Gerima   \n4                Andy Devonshire   \n\n                                                cast  \\\n0  Sami Bouajila, Tracy Gotoas, Samuel Jouy, Nabi...   \n1  Kate Siegel, Zach Gilford, Hamish Linklater, H...   \n2  Vanessa Hudgens, Kimiko Glenn, James Marsden, ...   \n3  Kofi Ghanaba, Oyafunmike Ogunlano, Alexandra D...   \n4  Mel Giedroyc, Sue Perkins, Mary Berry, Paul Ho...   \n\n                                             country           date_added  \\\n0                                             Unkown  2021-09-24 00:00:00   \n1                                             Unkown  2021-09-24 00:00:00   \n2                                             Unkown  2021-09-24 00:00:00   \n3  United States, Ghana, Burkina Faso, United Kin...  2021-09-24 00:00:00   \n4                                     United Kingdom  2021-09-24 00:00:00   \n\n   release_year rating   duration  \\\n0          2021  TV-MA   1 Season   \n1          2021  TV-MA   1 Season   \n2          2021     PG     91 min   \n3          1993  TV-MA    125 min   \n4          2021  TV-14  9 Seasons   \n\n                                           listed_in  \\\n0  Crime TV Shows, International TV Shows, TV Act...   \n1                 TV Dramas, TV Horror, TV Mysteries   \n2                           Children & Family Movies   \n3   Dramas, Independent Movies, International Movies   \n4                       British TV Shows, Reality TV   \n\n                                         description  \n0  To protect his family from a powerful drug lor...  \n1  The arrival of a charismatic young priest brin...  \n2  Equestria's divided. But a bright-eyed hero be...  \n3  On a photo shoot in Ghana, an American model s...  \n4  A talented batch of amateur bakers face off in...  \n"
        }
      ],
      "execution_count": 56
    },
    {
      "id": "9199f3b1-5ecd-4920-a2d6-d824561d7437",
      "cell_type": "code",
      "source": "print(\"\\nLast few rows of the Updated DataFrame (should include the new data):\")\nprint(updated_df.tail())",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "\nLast few rows of the Updated DataFrame (should include the new data):\n     show_id   type            title         director  \\\n5697   s8805  Movie       Zombieland  Ruben Fleischer   \n5698   s8806  Movie             Zoom     Peter Hewitt   \n5699   s8807  Movie           Zubaan      Mozez Singh   \n5700  ns9001  Movie  Action Packed 3         John Doe   \n5701  ns9003  Movie   Another Comedy       Jane Smith   \n\n                                                   cast        country  \\\n5697  Jesse Eisenberg, Woody Harrelson, Emma Stone, ...  United States   \n5698  Tim Allen, Courteney Cox, Chevy Chase, Kate Ma...  United States   \n5699  Vicky Kaushal, Sarah-Jane Dias, Raaghav Chanan...          India   \n5700                                   Actor A, Actor B            USA   \n5701                                   Actor D, Actor E         Canada   \n\n               date_added  release_year rating duration  \\\n5697  2019-11-01 00:00:00          2009      R   88 min   \n5698  2020-01-11 00:00:00          2006     PG   88 min   \n5699  2019-03-02 00:00:00          2015  TV-14  111 min   \n5700  2023-05-14 00:00:00          2022  PG-13  110 min   \n5701  2023-03-12 00:00:00          2023      R   95 min   \n\n                                           listed_in  \\\n5697                         Comedies, Horror Movies   \n5698              Children & Family Movies, Comedies   \n5699  Dramas, International Movies, Music & Musicals   \n5700                               Action, Adventure   \n5701                                          Comedy   \n\n                                            description  \n5697  Looking to survive in a world taken over by zo...  \n5698  Dragged from civilian life, a former superhero...  \n5699  A scrappy but poor boy worms his way into a ty...  \n5700                          Exciting new action film.  \n5701                              Hilarious new comedy.  \n"
        }
      ],
      "execution_count": 57
    },
    {
      "id": "3a9cd181-78d4-432f-92b2-ef991b9fdb60",
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "1a591d54-ac7a-4615-9a6c-5cd8e490c914",
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}